#include <iostream>
using namespace std;

#define MAX 5 // maximum size of the queue

int queue[MAX];
int front = -1;
int rear = -1;

// function to insert an element in the queue
void enqueue(int x) {
  if ((rear + 1) % MAX == front) { // check if the queue is full
    cout << "Queue is full"<<endl;
    return;
  }
  if (front == -1) { // check if the queue is empty
    front = 0;
    rear = 0;
  } else {
    rear = (rear + 1) % MAX; // increment rear in a circular way
  }
  queue[rear] = x; // insert the element at rear
}

// function to delete an element from the queue
int dequeue() {
  if (front == -1) { // check if the queue is empty
    cout << "Queue is empty"<<endl;
    return -1;
  }
  int x = queue[front]; // get the element at front
  if (front == rear) { // check if the queue has only one element
    front = -1;
    rear = -1;
  } else {
    front = (front + 1) % MAX; // increment front in a circular way
  }
  return x; // return the deleted element
}

// function to display the queue
void display() {
  if (front == -1) { // check if the queue is empty
    cout << "Queue is empty "<<endl;
    return;
  }
  cout << "Queue elements are : ";
  int i = front;
  while (i != rear) { // loop from front to rear
    cout << queue[i] << " ";
    i = (i + 1) % MAX; // increment i in a circular way
  }
  cout << queue[rear] << " "<<endl; // print the last element
}

int main() {
  // test the queue operations
  enqueue(10);
  enqueue(20);
  enqueue(30);
  enqueue(40);
  enqueue(50);
  display();
  cout << "Deleted element: " << dequeue() << "\n";
  cout << "Deleted element: " << dequeue() << "\n";
  display();
  enqueue(60);
  enqueue(70);
  display();
  return 0;
}
